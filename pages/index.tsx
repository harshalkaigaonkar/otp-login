import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import axios from'axios'
import React, { useRef, useState } from 'react'
import { ToastContainer, toast } from 'react-toastify';
import { signInWithPhoneNumber, RecaptchaVerifier } from "firebase/auth";
import { auth } from '../firebase';
import styles from '../styles/Home.module.css'
import 'react-toastify/dist/ReactToastify.css';
import { FirebaseError } from 'firebase/app'

const Home: NextPage = () => {
  const [otpSent, setOtpSent] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [name, setName] = useState<string | undefined | null>("");
  const [phno, setPhno] = useState<string | undefined | null>("");
  const [otp, setOtp] = useState<string | undefined | null>("");
  const [confirmation, setConfirmation] = useState<any>();

  const otp1 = useRef<string>("");
  const otp2 = useRef<string>("");
  const otp3 = useRef<string>("");
  const otp4 = useRef<string>("");
  const otp5 = useRef<string>("");
  const otp6 = useRef<string>("");

  const OTPHandler = async (e: React.SyntheticEvent<EventTarget>) => {
    e.preventDefault();
    if(otp)
    {
      if(typeof otp === "string" && otp.length !== 6) {
        toast.error("Enter 6 digits OTP!")
      } else {
        confirmation.confirm(otp).then((user: any) => {
          if(user) {
            toast.success("Login Success!")
            console.log(user)
          }
          else
          toast.error("Incorrect OTP!!")
        }).catch((error: FirebaseError) => {
          toast.error("OTP Limit Exceeded!!")
          console.log(error)
        })
      }
      return;
    }
    // getting data
    const name: string = document.querySelector<any>('input[id="name"]')?.value
    const phone: string = document.querySelector<any>('input[id="phone"]')?.value
    const countryCode: string = document.querySelector<any>('input[id="country-code"]')?.value
    setLoading(true)
      const recaptchaVerifier : any = new RecaptchaVerifier('recapcha-div',
        {
          'size': 'invisible',
          'callback': (response: any) => {
            // reCAPTCHA solved, allow signInWithPhoneNumber.
            // ...
            console.log(response)
          },
          'expired-callback': () => {
            // Response expired. Ask user to solve reCAPTCHA again.
            // ...
          }
        }, auth);
      signInWithPhoneNumber(auth, countryCode + phone, recaptchaVerifier)
      .then((confirmationResult: any) => {
        setConfirmation(confirmationResult)
        setName(name);
        setPhno(countryCode + phone);
        setOtpSent(true)
        setLoading(false)
    
        toast.success('Sent!')
      }).catch((error) => {
        setLoading(false)
        console.log(error);
        toast.error("Some Error Occured!!")
      });
  }

  const backHandler = () => {
    setOtpSent(false); 
    setOtp("");
    otp1.current = ""
    otp2.current = ""
    otp3.current = ""
    otp4.current = ""
    otp5.current = ""
    otp6.current = ""
  }

  const changeHandler = (type: string, e:  React.ChangeEvent<HTMLInputElement>): void => {
    const len = e.target.value.length;
    switch(type) {
      case "otp1": {
        otp1.current = e.target?.value;
        if(len) {
          document.getElementById('otp2')?.focus();
        }
        break;
      }
      case "otp2": {
        otp2.current = e.target?.value;
        if(len) {
          document.getElementById('otp3')?.focus();
        }
        else
          document.getElementById('otp1')?.focus();
        break;
      }
      case "otp3": {
        otp3.current = e.target?.value;
        if(len) {
          document.getElementById('otp4')?.focus();
        }
        else
          document.getElementById('otp2')?.focus();
        break;
      }
      case "otp4": {
        otp4.current = e.target?.value; 
        if(len) {
          document.getElementById('otp5')?.focus();
        }
        else
          document.getElementById('otp3')?.focus();
        break;
      }
      case "otp5": {
        otp5.current = e.target?.value;
        if(len) {
          document.getElementById('otp6')?.focus();
        }
        else
        document.getElementById('otp4')?.focus();
        break;
      }
      case "otp6": {
        otp6.current = e.target?.value;
        if(len) {
          document.getElementById('submit-button')?.focus();
        }
        else
          document.getElementById('otp5')?.focus();
        break;
      }
    }
    setOtp(otp1.current + otp2.current + otp3.current + otp4.current + otp5.current + otp6.current);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>OTP Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='h-screen'>
      <div className="flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      { loading ? 
        <div className="h-screen flex justify-center items-center">
            <div className="spinner-3"></div>
        </div> :
        <div className="w-full max-w-md space-y-8">
          {otpSent && (
            <div className='w-fit p-2 text-indigo-600 cursor-pointer border rounded-full hover:text-white border-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2' onClick={backHandler}>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" />
              </svg>
            </div>
          )}
          <div>
            <img
              className="mx-auto h-12 w-auto"
              src="https://tweepsbook.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FTweepsBook.739db03f.png&w=64&q=75"
              alt="Company Logo"
            />
            <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
              {!otpSent ? "Sign in to your account": "Enter your OTP"}
            </h2>
          </div>
          <form id="form" className="mt-8 space-y-6" onSubmit={OTPHandler}>
          {!otpSent ? (
            <>
            <input type="hidden" name="remember" defaultValue="true" />
            <div className="-space-y-px rounded-md shadow-sm">
              <div>
                <label htmlFor="email-address" className="sr-only">
                  Name
                </label>
                <input
                  id="name"
                  name="name"
                  type="text"
                  autoFocus
                  required
                  className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                  placeholder="Your Name"
                />
              </div>
              <div>
                <label htmlFor="phone" className="sr-only">
                  Phone
                </label>
                <div className='flex flex-row'>
                  <input
                    id="country-code"
                    name="country-code"
                    type="text"
                    required
                    readOnly
                    value="+91"
                    className="relative block w-14 appearance-none rounded-none rounded-bl-md border border-gray-300 px-3 py-2 text-gray-900 font-medium placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm cursor-default"
                  />
                  <input
                    id="phone"
                    name="phone"
                    type="number"
                    required
                    className="relative block w-full appearance-none rounded-none rounded-br-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    placeholder="Phone Number"
                    pattern="[0-9]{10}"
                    maxLength={10}
                    minLength={10}
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Remember me
                </label>
              </div>
            </div>

            </>
          ): (
            <>
            <span className='text-xl font-light w-full'>Hey <b>{name}</b>, we've sent an OTP to <b>{phno}</b>.</span>
              <div className='flex flex-row justify-center gap-3'>
                <input
                      id="otp1"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      autoFocus
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp1", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
                <input
                      id="otp2"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp2", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
                <input
                      id="otp3"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp3", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
                <input
                      id="otp4"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp4", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
                <input
                      id="otp5"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp5", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
                <input
                      id="otp6"
                      name="otp"
                      type="number"
                      inputMode="numeric"
                      required
                      className="relative block w-8 p-[10px] appearance-none rounded-md border border-gray-300 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                      placeholder="X"
                      onChange={e => changeHandler("otp6", e)}
                      pattern="[0-9]{1}"
                      maxLength={1}
                      minLength={0}
                  />
              </div>
            </>
          )}
          <div>
              <button
                type="submit"
                id="submit-button"
                className="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              >
                <span>
                  {otpSent && typeof otp === 'string' && otp.length < 6 && (
                    <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg className="h-5 w-5 text-indigo-500 group-hover:text-indigo-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clip-rule="evenodd" />
                    </svg>
                  </span>
                  )}
                </span>
                {!otpSent ? "Generate OTP" : "Verify"}
              </button>
            </div>
          </form>
        </div>}
        <div id="recapcha-div"></div>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      </div>
      </main>
    </div>
  )
}

export default Home
